# Build settings for Appveyor CI

image: Ubuntu

configuration: Release

branches:
  except:
    - latest

cache:
  - download

environment:
  matrix:
    - build_type: source
    - build_type: librazik
    - build_type: macos
    - build_type: mingw32
    - build_type: mingw64
  GIT_PUBKEY:
    secure: v1Kq8OUJsWKW5gn4AXi0FCKOuYG1XK9nlkpux50M2JIrv2v5t/V8EhQOr6SxDsdKZuhcbT+9ZG85TvIEyYmlR9JLs+O06o4oHLzMKmY9+G/HkNpVAnXTwcksz+2vi+BXisvY6Hll7cVuJMOaieP1b7dZ+fF6zjFzhEZ+WhPV3bkzUrOXdfgFl2wz4J6yXLxDaqLCj3A/gmC8dRV4aFDYRcWc1idbmofgNZFaO/1gLxpflA3YbXJSoXIA9+4RNRz0kzlKXg/Wufkh1BLYHBqF80iFO2iBd1o+yehdpIaJtOcEhdmKAUtmwP8+IBsFFJmJotP6lDiO8SO6U6w/yPUplySXspZiv6Spey34Pt5+KbiGI/u1WmM40twE3ohYp8WgpbznKmJwKk+YnqEZimc3IkfnYpk5Eiy/rZo57w2c0/PZXMyyzf8WVuk64X4Jda1hkHNhV9WvSQFXjRCTJIUl6zQeNDjYWCH909pyhlUsPPPguZZolh0KFweD9VZMktGWmdhEAmmOSfFsRFP5yTuhGsODwuLnHhhZu++YO4pYhhweKPXAhORO1ElORcNE7rz2wgF1F14Ey0DDKyonJtLxHqQR1gfTrVJPBRAA8O5xPLwJAmR3VQB01jVMPgI7ZV7cnQWBr63z3VNe4nw+l7r7A381ehcRwP/TC81jhFMdl/HcnCH0lCT11EoPjCbQxeQb
  GIT_PRIVKEY:
    secure: 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

install:
  - mkdir -p download
  - checkfile() { test "$(sha1sum -b "$1" | cut -d ' ' -f 1)" == "$2"; }
  - getfile() { if ! checkfile "$1" "$2"; then curl -o "$1" "$3"; checkfile "$1" "$2"; fi }
  - makekey() { install -d ~/.ssh -m 0700; echo "$1" | base64 -d > ~/.ssh/"$2"; chmod 0600 ~/.ssh/"$2"; }
  - pushtag() { git tag -f -a "$1" -m "$2"; git push -f origin "$1" || true; }
  - is_master() { test "$APPVEYOR_REPO_BRANCH" = "master" -a -z "$APPVEYOR_PULL_REQUEST_NUMBER"; }
  - git submodule update --init --recursive
  #- patch -d thirdparty/JUCE -p1 -i "`pwd`"/resources/patch/juce-pthread-priority.patch
  - patch -d thirdparty/JUCE -p1 -i "`pwd`"/resources/patch/juce-enable-mingw-vst3.patch
  - patch -d thirdparty/JUCE -p1 -i "`pwd`"/resources/patch/juce-enable-mingw-directwrite.patch
  - patch -d thirdparty/JUCE -p1 -i "`pwd`"/resources/patch/juce-x11-badwindow.patch
  - patch -d thirdparty/JUCE -p1 -i "`pwd`"/resources/patch/juce-win32-lmms-workaround.patch
  - patch -d thirdparty/JUCE -p1 -i "`pwd`"/resources/patch/juce-gcc9.patch
  - getfile download/asiosdk2.3.zip 4ed6c150dcc1ee55d4ae32dfabad306547e9f15d http://jpcima.sdf1.org/files/asiosdk2.3.zip
  - getfile download/vst_sdk2_4_rev2.zip d7f3668c90a69dbe640f2eeed6fc0a7e0717adff http://jpcima.sdf1.org/files/vst_sdk2_4_rev2.zip
  - unzip -q -d thirdparty download/asiosdk2.3.zip
  - unzip -q -d thirdparty download/vst_sdk2_4_rev2.zip
  - makekey "$GIT_PUBKEY" git.pub
  - makekey "$GIT_PRIVKEY" git
  - export GIT_SSH_COMMAND="ssh -i $HOME/.ssh/git -o StrictHostKeyChecking=no"
  - git config --global user.name 'Build robot'
  - git config --global user.email 'der.roboter@localhost.localdomain'
  - git remote set-url origin "git@github.com:$APPVEYOR_REPO_NAME.git"
  - if is_master; then pushtag latest "Latest [ci skip]"; fi
  - sudo apt-get install p7zip

for:
  -
    matrix:
      only:
        - build_type: source
    build_script:
      - git clone --recursive . ADLplug-dev
      - rm -rf ADLplug-dev/thirdparty/ASIOSDK2.3
      - rm -rf ADLplug-dev/thirdparty/vstsdk2.4
      - rm -rf ADLplug-dev/thirdparty/JUCE/{doxygen,examples,extras}
      - rm -rf ADLplug-dev/thirdparty/fmt/doc
      - rm -rf ADLplug-dev/thirdparty/{libADLMIDI,libOPNMIDI}/fm_banks
      - rm -rf ADLplug-dev/thirdparty/libADLMIDI/projects
      - find ADLplug-dev -name '.git*' -exec rm -rf {} +
      - tar -c -J -v -f ADLplug-dev.tar.xz ADLplug-dev
    artifacts:
      - path: ADLplug-dev.tar.xz
        name: 'ADLplug & OPNplug source code'
  -
    matrix:
      only:
        - build_type: librazik
    build_script:
      - rm -rf thirdparty/vstsdk2.4
      - docker pull jpcima/librazik
      - container=$(docker run -d -i -v /home:/home jpcima/librazik /bin/bash)
      - cross() { docker exec -w "$(pwd)" -i "$container" "$@"; }
      - build() { mkdir -p "$1"; cd "$1"; shift; cross cmake -G "Unix Makefiles" "$@" ..; cross make -j2; cd ..; }
      - build ADLplug-dev-lzk -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPL3 -DADLplug_PCH=ON -DADLplug_LV2=ON
      - build OPNplug-dev-lzk -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPN2 -DADLplug_PCH=ON -DADLplug_LV2=ON
      - package() { cd "$1"; cross cpack -G DEB; mv ./*.deb ..; cd ..; }
      - package ADLplug-dev-lzk
      - package OPNplug-dev-lzk
    artifacts:
      - path: adlplug_amd64.deb
        name: 'ADLplug for 64-bit LibraZiK-2 / Debian Stretch'
      - path: opnplug_amd64.deb
        name: 'OPNplug for 64-bit LibraZiK-2 / Debian Stretch'
  -
    matrix:
      only:
        - build_type: macos
    build_script:
      - docker pull jpcima/osxcross
      - container=$(docker run -d -i -v /home:/home jpcima/osxcross /bin/bash)
      - cross() { docker exec -w "$(pwd)" -e PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/osxcross/target/bin" -i "$container" "$@"; }
      - build() { mkdir -p "$1"; cd "$1"; shift; cross x86_64-apple-darwin15-cmake -G "Unix Makefiles" -DCMAKE_OSX_ARCHITECTURES="x86_64;i386" "$@" ..; cross make -j2; cd ..; }
      - package() { 7zr a "$1".7z "$1"/{lv2,vst2,vst3,au,standalone}; }
      - build ADLplug-dev-mac -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPL3 -DADLplug_LV2=ON -DADLplug_AU=ON
      - build OPNplug-dev-mac -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPN2 -DADLplug_LV2=ON -DADLplug_AU=ON
      - package ADLplug-dev-mac
      - package OPNplug-dev-mac
    artifacts:
      - path: ADLplug-dev-mac.7z
        name: 'ADLplug for macOS'
      - path: OPNplug-dev-mac.7z
        name: 'OPNplug for macOS'
  -
    matrix:
      only:
        - build_type: mingw32
    build_script:
      - docker pull jpcima/mingw
      - container=$(docker run -d -i -v /home:/home jpcima/mingw /bin/bash)
      - cross() { docker exec -w "$(pwd)" -i "$container" "$@"; }
      - build() { mkdir -p "$1"; cd "$1"; shift; cross mingw32-cmake -G "Unix Makefiles" "$@" ..; cross make -j2; cd ..; }
      - package() { 7zr a "$1".7z "$1"/{lv2,vst2,vst3,standalone}; }
      - build ADLplug-dev-win32 -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPL3 -DADLplug_PCH=ON -DADLplug_LV2=ON
      - build OPNplug-dev-win32 -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPN2 -DADLplug_PCH=ON -DADLplug_LV2=ON
      - package ADLplug-dev-win32
      - package OPNplug-dev-win32
    artifacts:
      - path: ADLplug-dev-win32.7z
        name: 'ADLplug for 32-bit Windows'
      - path: OPNplug-dev-win32.7z
        name: 'OPNplug for 32-bit Windows'
  -
    matrix:
      only:
        - build_type: mingw64
    build_script:
      - docker pull jpcima/mingw
      - container=$(docker run -d -i -v /home:/home jpcima/mingw /bin/bash)
      - cross() { docker exec -w "$(pwd)" -i "$container" "$@"; }
      - build() { mkdir -p "$1"; cd "$1"; shift; cross mingw64-cmake -G "Unix Makefiles" "$@" ..; cross make -j2; cd ..; }
      - package() { 7zr a "$1".7z "$1"/{lv2,vst2,vst3,standalone}; }
      - build ADLplug-dev-win64 -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPL3 -DADLplug_PCH=ON -DADLplug_LV2=ON
      - build OPNplug-dev-win64 -DCMAKE_BUILD_TYPE=Release -DADLplug_CHIP=OPN2 -DADLplug_PCH=ON -DADLplug_LV2=ON
      - package ADLplug-dev-win64
      - package OPNplug-dev-win64
    artifacts:
      - path: ADLplug-dev-win64.7z
        name: 'ADLplug for 64-bit Windows'
      - path: OPNplug-dev-win64.7z
        name: 'OPNplug for 64-bit Windows'

deploy:
  - release: latest
    description: The latest development release. Revision $(APPVEYOR_REPO_COMMIT)
    provider: GitHub
    auth_token:
      secure: tvDB6NGgbFIuYY2MbMnWtb7+uQNnlYmnqjNLZUxKhknQq/xjyNbSWayJkzjQJcga
    artifact: 'ADLplug for 32-bit Windows,OPNplug for 32-bit Windows,ADLplug for 64-bit Windows,OPNplug for 64-bit Windows,ADLplug for macOS,OPNplug for macOS,ADLplug for 64-bit LibraZiK-2 / Debian Stretch,OPNplug for 64-bit LibraZiK-2 / Debian Stretch,ADLplug & OPNplug source code'
    draft: false
    prerelease: true
    force_update: true
    on:
      branch: master
